// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transaction.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Transaction service

func NewTransactionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Transaction service

type TransactionService interface {
	GetHoldings(ctx context.Context, in *HoldingsRequest, opts ...client.CallOption) (*HoldingsResponse, error)
	GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, opts ...client.CallOption) (*SummaryTotalsResponse, error)
}

type transactionService struct {
	c    client.Client
	name string
}

func NewTransactionService(name string, c client.Client) TransactionService {
	return &transactionService{
		c:    c,
		name: name,
	}
}

func (c *transactionService) GetHoldings(ctx context.Context, in *HoldingsRequest, opts ...client.CallOption) (*HoldingsResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.GetHoldings", in)
	out := new(HoldingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionService) GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, opts ...client.CallOption) (*SummaryTotalsResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.GetSummaryTotals", in)
	out := new(SummaryTotalsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transaction service

type TransactionHandler interface {
	GetHoldings(context.Context, *HoldingsRequest, *HoldingsResponse) error
	GetSummaryTotals(context.Context, *SummaryTotalsRequest, *SummaryTotalsResponse) error
}

func RegisterTransactionHandler(s server.Server, hdlr TransactionHandler, opts ...server.HandlerOption) error {
	type transaction interface {
		GetHoldings(ctx context.Context, in *HoldingsRequest, out *HoldingsResponse) error
		GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, out *SummaryTotalsResponse) error
	}
	type Transaction struct {
		transaction
	}
	h := &transactionHandler{hdlr}
	return s.Handle(s.NewHandler(&Transaction{h}, opts...))
}

type transactionHandler struct {
	TransactionHandler
}

func (h *transactionHandler) GetHoldings(ctx context.Context, in *HoldingsRequest, out *HoldingsResponse) error {
	return h.TransactionHandler.GetHoldings(ctx, in, out)
}

func (h *transactionHandler) GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, out *SummaryTotalsResponse) error {
	return h.TransactionHandler.GetSummaryTotals(ctx, in, out)
}
