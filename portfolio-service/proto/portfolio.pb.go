// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: proto/portfolio.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the request to retrieve holdings for a specific account.
type HoldingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the account for which the holdings are to be retrieved.
	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HoldingsRequest) Reset() {
	*x = HoldingsRequest{}
	mi := &file_proto_portfolio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HoldingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldingsRequest) ProtoMessage() {}

func (x *HoldingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldingsRequest.ProtoReflect.Descriptor instead.
func (*HoldingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{0}
}

func (x *HoldingsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Holds the response for the holdings-related request.
type HoldingsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of investments held in the account.
	Investments   []*Investment `protobuf:"bytes,3,rep,name=investments,proto3" json:"investments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HoldingsResponse) Reset() {
	*x = HoldingsResponse{}
	mi := &file_proto_portfolio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HoldingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldingsResponse) ProtoMessage() {}

func (x *HoldingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldingsResponse.ProtoReflect.Descriptor instead.
func (*HoldingsResponse) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{1}
}

func (x *HoldingsResponse) GetInvestments() []*Investment {
	if x != nil {
		return x.Investments
	}
	return nil
}

// Represents an individual investment within a portfolio or account.
type Investment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The symbol of the asset (e.g., "AAPL" for Apple stock).
	AssetSymbol string `protobuf:"bytes,1,opt,name=asset_symbol,json=assetSymbol,proto3" json:"asset_symbol,omitempty"`
	// The full name of the asset (e.g., "Apple Inc.").
	AssetName string `protobuf:"bytes,2,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// The market or exchange code where the asset is traded (e.g., "NASDAQ").
	MarketCode string `protobuf:"bytes,3,opt,name=market_code,json=marketCode,proto3" json:"market_code,omitempty"`
	// The current price of the asset.
	CurrentPrice *Money `protobuf:"bytes,4,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// The average price of the asset.
	AveragePrice *Money `protobuf:"bytes,5,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	// The quantity of the asset held in the portfolio.
	Quantity float64 `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The total value of the investment, calculated as price * quantity.
	TotalValue *Money `protobuf:"bytes,7,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	// The total cost of all trades including commissions.
	TotalCost *Money `protobuf:"bytes,8,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	// The return on the investment due to price appreciation or depreciation.
	CapitalReturn *InvestmentReturn `protobuf:"bytes,9,opt,name=capital_return,json=capitalReturn,proto3" json:"capital_return,omitempty"`
	// The return on the investment from dividends paid by the asset.
	DividendReturn *InvestmentReturn `protobuf:"bytes,10,opt,name=dividend_return,json=dividendReturn,proto3" json:"dividend_return,omitempty"`
	// The return on the investment due to currency fluctuations (if applicable).
	CurrencyReturn *InvestmentReturn `protobuf:"bytes,11,opt,name=currency_return,json=currencyReturn,proto3" json:"currency_return,omitempty"`
	// The total return on the investment, combining capital, dividend, and currency returns.
	TotalReturn   *InvestmentReturn `protobuf:"bytes,12,opt,name=total_return,json=totalReturn,proto3" json:"total_return,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Investment) Reset() {
	*x = Investment{}
	mi := &file_proto_portfolio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Investment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Investment) ProtoMessage() {}

func (x *Investment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Investment.ProtoReflect.Descriptor instead.
func (*Investment) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{2}
}

func (x *Investment) GetAssetSymbol() string {
	if x != nil {
		return x.AssetSymbol
	}
	return ""
}

func (x *Investment) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *Investment) GetMarketCode() string {
	if x != nil {
		return x.MarketCode
	}
	return ""
}

func (x *Investment) GetCurrentPrice() *Money {
	if x != nil {
		return x.CurrentPrice
	}
	return nil
}

func (x *Investment) GetAveragePrice() *Money {
	if x != nil {
		return x.AveragePrice
	}
	return nil
}

func (x *Investment) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Investment) GetTotalValue() *Money {
	if x != nil {
		return x.TotalValue
	}
	return nil
}

func (x *Investment) GetTotalCost() *Money {
	if x != nil {
		return x.TotalCost
	}
	return nil
}

func (x *Investment) GetCapitalReturn() *InvestmentReturn {
	if x != nil {
		return x.CapitalReturn
	}
	return nil
}

func (x *Investment) GetDividendReturn() *InvestmentReturn {
	if x != nil {
		return x.DividendReturn
	}
	return nil
}

func (x *Investment) GetCurrencyReturn() *InvestmentReturn {
	if x != nil {
		return x.CurrencyReturn
	}
	return nil
}

func (x *Investment) GetTotalReturn() *InvestmentReturn {
	if x != nil {
		return x.TotalReturn
	}
	return nil
}

// Represents an amount of money with its associated currency.
type Money struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The monetary amount (e.g., 100.0).
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The ISO currency code (e.g., "USD" for United States Dollar).
	CurrencyCode  string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Money) Reset() {
	*x = Money{}
	mi := &file_proto_portfolio_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{3}
}

func (x *Money) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Money) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// Represents the return on an investment in terms of monetary value
// and the percentage of the original investment value.
type InvestmentReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The monetary return amount (e.g., 50.0 for $50).
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The ISO currency code (e.g., "USD").
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The return expressed as a percentage of the original investment value.
	ReturnPercentage float64 `protobuf:"fixed64,3,opt,name=return_percentage,json=returnPercentage,proto3" json:"return_percentage,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InvestmentReturn) Reset() {
	*x = InvestmentReturn{}
	mi := &file_proto_portfolio_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvestmentReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentReturn) ProtoMessage() {}

func (x *InvestmentReturn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentReturn.ProtoReflect.Descriptor instead.
func (*InvestmentReturn) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{4}
}

func (x *InvestmentReturn) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InvestmentReturn) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *InvestmentReturn) GetReturnPercentage() float64 {
	if x != nil {
		return x.ReturnPercentage
	}
	return 0
}

// Represents the request to retrieve summary totals for a specific account.
type SummaryTotalsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the account for which the summary totals are requested.
	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryTotalsRequest) Reset() {
	*x = SummaryTotalsRequest{}
	mi := &file_proto_portfolio_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryTotalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryTotalsRequest) ProtoMessage() {}

func (x *SummaryTotalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryTotalsRequest.ProtoReflect.Descriptor instead.
func (*SummaryTotalsRequest) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{5}
}

func (x *SummaryTotalsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Holds the response for summary totals, including the overall portfolio value
// and different types of returns.
type SummaryTotalsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total value of the portfolio.
	PortfolioValue *Money `protobuf:"bytes,1,opt,name=portfolio_value,json=portfolioValue,proto3" json:"portfolio_value,omitempty"`
	// The total capital return across all investments in the portfolio.
	CapitalReturn *InvestmentReturn `protobuf:"bytes,2,opt,name=capital_return,json=capitalReturn,proto3" json:"capital_return,omitempty"`
	// The total dividend return across all investments in the portfolio.
	DividendReturn *InvestmentReturn `protobuf:"bytes,3,opt,name=dividend_return,json=dividendReturn,proto3" json:"dividend_return,omitempty"`
	// The total currency return due to exchange rate fluctuations.
	CurrencyReturn *InvestmentReturn `protobuf:"bytes,4,opt,name=currency_return,json=currencyReturn,proto3" json:"currency_return,omitempty"`
	// The overall total return, combining capital, dividend, and currency returns.
	TotalReturn   *InvestmentReturn `protobuf:"bytes,5,opt,name=total_return,json=totalReturn,proto3" json:"total_return,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryTotalsResponse) Reset() {
	*x = SummaryTotalsResponse{}
	mi := &file_proto_portfolio_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryTotalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryTotalsResponse) ProtoMessage() {}

func (x *SummaryTotalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryTotalsResponse.ProtoReflect.Descriptor instead.
func (*SummaryTotalsResponse) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{6}
}

func (x *SummaryTotalsResponse) GetPortfolioValue() *Money {
	if x != nil {
		return x.PortfolioValue
	}
	return nil
}

func (x *SummaryTotalsResponse) GetCapitalReturn() *InvestmentReturn {
	if x != nil {
		return x.CapitalReturn
	}
	return nil
}

func (x *SummaryTotalsResponse) GetDividendReturn() *InvestmentReturn {
	if x != nil {
		return x.DividendReturn
	}
	return nil
}

func (x *SummaryTotalsResponse) GetCurrencyReturn() *InvestmentReturn {
	if x != nil {
		return x.CurrencyReturn
	}
	return nil
}

func (x *SummaryTotalsResponse) GetTotalReturn() *InvestmentReturn {
	if x != nil {
		return x.TotalReturn
	}
	return nil
}

// Represents the request to retrieve historical values for a specific account.
type PerformanceHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the account for which the holdings are to be retrieved.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The start date for the historical data retrieval period, formatted as "YYYY-MM-DD".
	// This marks the beginning of the time range for which historical investment data is requested.
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The end date for the historical data retrieval period, formatted as "YYYY-MM-DD".
	// This marks the conclusion of the time range for which historical investment data is requested.
	EndDate       string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerformanceHistoryRequest) Reset() {
	*x = PerformanceHistoryRequest{}
	mi := &file_proto_portfolio_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceHistoryRequest) ProtoMessage() {}

func (x *PerformanceHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceHistoryRequest.ProtoReflect.Descriptor instead.
func (*PerformanceHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{7}
}

func (x *PerformanceHistoryRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PerformanceHistoryRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *PerformanceHistoryRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Represents the response containing historical investment data over a specified period.
type PerformanceHistoryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of historical records, where each record provides detailed information
	// about an investment's cost and value on specific dates.
	Records       []*HistoricalRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerformanceHistoryResponse) Reset() {
	*x = PerformanceHistoryResponse{}
	mi := &file_proto_portfolio_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceHistoryResponse) ProtoMessage() {}

func (x *PerformanceHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceHistoryResponse.ProtoReflect.Descriptor instead.
func (*PerformanceHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{8}
}

func (x *PerformanceHistoryResponse) GetRecords() []*HistoricalRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// Represents the historical record of an investment's data for a specific date.
type HistoricalRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The date of the trade or valuation, formatted as "YYYY-MM-DD".
	TradeDate string `protobuf:"bytes,1,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	// The total cost of the investment on the specified trade date.
	Cost float64 `protobuf:"fixed64,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// The total value of the investment on the specified trade date.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	// The ISO currency code (e.g., "USD") associated with the cost and value.
	CurrencyCode  string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoricalRecord) Reset() {
	*x = HistoricalRecord{}
	mi := &file_proto_portfolio_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRecord) ProtoMessage() {}

func (x *HistoricalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalRecord.ProtoReflect.Descriptor instead.
func (*HistoricalRecord) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_proto_rawDescGZIP(), []int{9}
}

func (x *HistoricalRecord) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *HistoricalRecord) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *HistoricalRecord) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HistoricalRecord) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

var File_proto_portfolio_proto protoreflect.FileDescriptor

var file_proto_portfolio_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x0f, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x10, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9d, 0x04, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3a,
	0x0a, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x44, 0x0a, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x7c, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0x35, 0x0a, 0x14, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0d, 0x63,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0f,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x74, 0x0a, 0x19, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x49, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x10,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xd4,
	0x01, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x73, 0x12, 0x15, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_portfolio_proto_rawDescOnce sync.Once
	file_proto_portfolio_proto_rawDescData = file_proto_portfolio_proto_rawDesc
)

func file_proto_portfolio_proto_rawDescGZIP() []byte {
	file_proto_portfolio_proto_rawDescOnce.Do(func() {
		file_proto_portfolio_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_portfolio_proto_rawDescData)
	})
	return file_proto_portfolio_proto_rawDescData
}

var file_proto_portfolio_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_portfolio_proto_goTypes = []any{
	(*HoldingsRequest)(nil),            // 0: HoldingsRequest
	(*HoldingsResponse)(nil),           // 1: HoldingsResponse
	(*Investment)(nil),                 // 2: Investment
	(*Money)(nil),                      // 3: Money
	(*InvestmentReturn)(nil),           // 4: InvestmentReturn
	(*SummaryTotalsRequest)(nil),       // 5: SummaryTotalsRequest
	(*SummaryTotalsResponse)(nil),      // 6: SummaryTotalsResponse
	(*PerformanceHistoryRequest)(nil),  // 7: PerformanceHistoryRequest
	(*PerformanceHistoryResponse)(nil), // 8: PerformanceHistoryResponse
	(*HistoricalRecord)(nil),           // 9: HistoricalRecord
}
var file_proto_portfolio_proto_depIdxs = []int32{
	2,  // 0: HoldingsResponse.investments:type_name -> Investment
	3,  // 1: Investment.current_price:type_name -> Money
	3,  // 2: Investment.average_price:type_name -> Money
	3,  // 3: Investment.total_value:type_name -> Money
	3,  // 4: Investment.total_cost:type_name -> Money
	4,  // 5: Investment.capital_return:type_name -> InvestmentReturn
	4,  // 6: Investment.dividend_return:type_name -> InvestmentReturn
	4,  // 7: Investment.currency_return:type_name -> InvestmentReturn
	4,  // 8: Investment.total_return:type_name -> InvestmentReturn
	3,  // 9: SummaryTotalsResponse.portfolio_value:type_name -> Money
	4,  // 10: SummaryTotalsResponse.capital_return:type_name -> InvestmentReturn
	4,  // 11: SummaryTotalsResponse.dividend_return:type_name -> InvestmentReturn
	4,  // 12: SummaryTotalsResponse.currency_return:type_name -> InvestmentReturn
	4,  // 13: SummaryTotalsResponse.total_return:type_name -> InvestmentReturn
	9,  // 14: PerformanceHistoryResponse.records:type_name -> HistoricalRecord
	0,  // 15: Portfolio.GetHoldings:input_type -> HoldingsRequest
	5,  // 16: Portfolio.GetSummaryTotals:input_type -> SummaryTotalsRequest
	7,  // 17: Portfolio.GetPerformanceHistory:input_type -> PerformanceHistoryRequest
	1,  // 18: Portfolio.GetHoldings:output_type -> HoldingsResponse
	6,  // 19: Portfolio.GetSummaryTotals:output_type -> SummaryTotalsResponse
	8,  // 20: Portfolio.GetPerformanceHistory:output_type -> PerformanceHistoryResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_portfolio_proto_init() }
func file_proto_portfolio_proto_init() {
	if File_proto_portfolio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_portfolio_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_portfolio_proto_goTypes,
		DependencyIndexes: file_proto_portfolio_proto_depIdxs,
		MessageInfos:      file_proto_portfolio_proto_msgTypes,
	}.Build()
	File_proto_portfolio_proto = out.File
	file_proto_portfolio_proto_rawDesc = nil
	file_proto_portfolio_proto_goTypes = nil
	file_proto_portfolio_proto_depIdxs = nil
}
