// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/portfolio.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Portfolio service

func NewPortfolioEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Portfolio service

type PortfolioService interface {
	// GetHoldings fetches the detailed holdings information for a user or account.
	// This may include assets, quantities, and related metadata.
	GetHoldings(ctx context.Context, in *HoldingsRequest, opts ...client.CallOption) (*HoldingsResponse, error)
	// GetSummaryTotals provides a summarized view of the totals for a user or account.
	// This typically includes aggregated financial data such as total value, profits, or losses.
	GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, opts ...client.CallOption) (*SummaryTotalsResponse, error)
}

type portfolioService struct {
	c    client.Client
	name string
}

func NewPortfolioService(name string, c client.Client) PortfolioService {
	return &portfolioService{
		c:    c,
		name: name,
	}
}

func (c *portfolioService) GetHoldings(ctx context.Context, in *HoldingsRequest, opts ...client.CallOption) (*HoldingsResponse, error) {
	req := c.c.NewRequest(c.name, "Portfolio.GetHoldings", in)
	out := new(HoldingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioService) GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, opts ...client.CallOption) (*SummaryTotalsResponse, error) {
	req := c.c.NewRequest(c.name, "Portfolio.GetSummaryTotals", in)
	out := new(SummaryTotalsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Portfolio service

type PortfolioHandler interface {
	// GetHoldings fetches the detailed holdings information for a user or account.
	// This may include assets, quantities, and related metadata.
	GetHoldings(context.Context, *HoldingsRequest, *HoldingsResponse) error
	// GetSummaryTotals provides a summarized view of the totals for a user or account.
	// This typically includes aggregated financial data such as total value, profits, or losses.
	GetSummaryTotals(context.Context, *SummaryTotalsRequest, *SummaryTotalsResponse) error
}

func RegisterPortfolioHandler(s server.Server, hdlr PortfolioHandler, opts ...server.HandlerOption) error {
	type portfolio interface {
		GetHoldings(ctx context.Context, in *HoldingsRequest, out *HoldingsResponse) error
		GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, out *SummaryTotalsResponse) error
	}
	type Portfolio struct {
		portfolio
	}
	h := &portfolioHandler{hdlr}
	return s.Handle(s.NewHandler(&Portfolio{h}, opts...))
}

type portfolioHandler struct {
	PortfolioHandler
}

func (h *portfolioHandler) GetHoldings(ctx context.Context, in *HoldingsRequest, out *HoldingsResponse) error {
	return h.PortfolioHandler.GetHoldings(ctx, in, out)
}

func (h *portfolioHandler) GetSummaryTotals(ctx context.Context, in *SummaryTotalsRequest, out *SummaryTotalsResponse) error {
	return h.PortfolioHandler.GetSummaryTotals(ctx, in, out)
}
