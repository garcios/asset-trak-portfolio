// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/currency.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Currency service

func NewCurrencyEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Currency service

type CurrencyService interface {
	// Sends a request to get the exchange rate between two currencies
	GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...client.CallOption) (*GetExchangeRateResponse, error)
	// Sends a request to get historical exchange rates between two currencies
	GetHistoricalExchangeRates(ctx context.Context, in *GetHistoricalExchangeRatesRequest, opts ...client.CallOption) (*GetHistoricalExchangeRatesResponse, error)
}

type currencyService struct {
	c    client.Client
	name string
}

func NewCurrencyService(name string, c client.Client) CurrencyService {
	return &currencyService{
		c:    c,
		name: name,
	}
}

func (c *currencyService) GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...client.CallOption) (*GetExchangeRateResponse, error) {
	req := c.c.NewRequest(c.name, "Currency.GetExchangeRate", in)
	out := new(GetExchangeRateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyService) GetHistoricalExchangeRates(ctx context.Context, in *GetHistoricalExchangeRatesRequest, opts ...client.CallOption) (*GetHistoricalExchangeRatesResponse, error) {
	req := c.c.NewRequest(c.name, "Currency.GetHistoricalExchangeRates", in)
	out := new(GetHistoricalExchangeRatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Currency service

type CurrencyHandler interface {
	// Sends a request to get the exchange rate between two currencies
	GetExchangeRate(context.Context, *GetExchangeRateRequest, *GetExchangeRateResponse) error
	// Sends a request to get historical exchange rates between two currencies
	GetHistoricalExchangeRates(context.Context, *GetHistoricalExchangeRatesRequest, *GetHistoricalExchangeRatesResponse) error
}

func RegisterCurrencyHandler(s server.Server, hdlr CurrencyHandler, opts ...server.HandlerOption) error {
	type currency interface {
		GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, out *GetExchangeRateResponse) error
		GetHistoricalExchangeRates(ctx context.Context, in *GetHistoricalExchangeRatesRequest, out *GetHistoricalExchangeRatesResponse) error
	}
	type Currency struct {
		currency
	}
	h := &currencyHandler{hdlr}
	return s.Handle(s.NewHandler(&Currency{h}, opts...))
}

type currencyHandler struct {
	CurrencyHandler
}

func (h *currencyHandler) GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, out *GetExchangeRateResponse) error {
	return h.CurrencyHandler.GetExchangeRate(ctx, in, out)
}

func (h *currencyHandler) GetHistoricalExchangeRates(ctx context.Context, in *GetHistoricalExchangeRatesRequest, out *GetHistoricalExchangeRatesResponse) error {
	return h.CurrencyHandler.GetHistoricalExchangeRates(ctx, in, out)
}
